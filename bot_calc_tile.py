import asyncio
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import os

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
API_TOKEN = os.getenv("BOT_TOKEN")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–ø–æ–ª–µ–∑–Ω–æ –Ω–∞ Render)
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("tile-bot")

bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# –°–ø–∏—Å–∫–∏ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
TYPE_WALL = "üß± –ù–∞—Å—Ç–µ–Ω–Ω–∞—è"
TYPE_FLOOR = "üß± –ù–∞–ø–æ–ª—å–Ω–∞—è"
LAYOUTS = ["–ø—Ä—è–º–∞—è —Ä–∞—Å–∫–ª–∞–¥–∫–∞", "—Å–æ —Å–º–µ—â–µ–Ω–∏–µ–º", "–ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏", "–Ω–µ—Ç"]

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class TileStates(StatesGroup):
    type = State()
    length = State()
    width = State()
    height = State()
    door_width = State()
    door_height = State()
    bath_length = State()
    bath_width = State()
    bath_height = State()
    has_screen = State()
    tile_length = State()
    tile_width = State()
    tile_price = State()
    seam = State()
    layout = State()
    reserve = State()

# –£—Ç–∏–ª–∫–∏
def parse_float(value: str) -> float | None:
    """–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∑–∞–ø—è—Ç–æ–π/—Ç–æ—á–∫–∏ –∏ —Ç—Ä–∏–º –ø—Ä–æ–±–µ–ª–æ–≤"""
    if not value or not value.strip():
        return None
    try:
        return float(value.strip().replace(",", "."))
    except ValueError:
        return None

def must_be_positive(x: float, allow_zero: bool = False) -> bool:
    return (x is not None) and (x >= 0 if allow_zero else x > 0)

def kb(rows: list[list[str]]) -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=t) for t in row] for row in rows],
        resize_keyboard=True
    )

# –ö–æ–º–∞–Ω–¥—ã
@dp.message(F.text.in_({"/start", "üîÅ –ü–æ—Å—á–∏—Ç–∞—Ç—å –∑–∞–Ω–æ–≤–æ"}))
async def start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–ª–∏—Ç–∫–∏ –æ—Ç –î–ò–ó –ë–ê–õ–ê–ù–°. üß±\n"
        "–Ø –ø–æ–º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ <b>–Ω–∞—Å—Ç–µ–Ω–Ω–æ–π</b> –∏–ª–∏ <b>–Ω–∞–ø–æ–ª—å–Ω–æ–π</b> –ø–ª–∏—Ç–∫–∏ "
        "—Å —É—á—ë—Ç–æ–º —Ä–∞–∑–º–µ—Ä–æ–≤, —à–≤–æ–≤, —Ä–∞—Å–∫–ª–∞–¥–∫–∏ –∏ –∑–∞–ø–∞—Å–∞.\n\n"
        "–í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤–≤–æ–¥–∏ –≤ <b>–º–µ—Ç—Ä–∞—Ö</b>, –∞ —Ä–∞–∑–º–µ—Ä—ã –ø–ª–∏—Ç–∫–∏ ‚Äî –≤ <b>–º–∏–ª–ª–∏–º–µ—Ç—Ä–∞—Ö</b>.\n"
        "–ï—Å–ª–∏ —á–∏—Å–ª–æ –Ω–µ —Ü–µ–ª–æ–µ ‚Äî –º–æ–∂–Ω–æ —Å –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ —Ç–æ—á–∫–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2,5 –∏–ª–∏ 2.5).\n\n"
        "–í—ã–±–µ—Ä–∏ —Ç–∏–ø –ø–ª–∏—Ç–∫–∏:",
        reply_markup=kb([[TYPE_WALL], [TYPE_FLOOR]])
    )
    await state.set_state(TileStates.type)

# –¢–∏–ø
@dp.message(TileStates.type)
async def get_type(message: Message, state: FSMContext):
    if message.text not in (TYPE_WALL, TYPE_FLOOR):
        await message.answer("–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ üëá", reply_markup=kb([[TYPE_WALL], [TYPE_FLOOR]]))
        return
    await state.update_data(type=message.text)
    await message.answer("–£–∫–∞–∂–∏ –¥–ª–∏–Ω—É –ø–æ–º–µ—â–µ–Ω–∏—è (–º):")
    await state.set_state(TileStates.length)

# –î–ª–∏–Ω–∞
@dp.message(TileStates.length)
async def get_length(message: Message, state: FSMContext):
    val = parse_float(message.text)
    if not must_be_positive(val):
        await message.answer("‚ùå –í–≤–µ–¥–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 2.5")
        return
    await state.update_data(length=val)
    await message.answer("–£–∫–∞–∂–∏ —à–∏—Ä–∏–Ω—É –ø–æ–º–µ—â–µ–Ω–∏—è (–º):")
    await state.set_state(TileStates.width)

# –®–∏—Ä–∏–Ω–∞
@dp.message(TileStates.width)
async def get_width(message: Message, state: FSMContext):
    val = parse_float(message.text)
    if not must_be_positive(val):
        await message.answer("‚ùå –í–≤–µ–¥–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1.8")
        return
    await state.update_data(width=val)
    data = await state.get_data()
    if data["type"] == TYPE_WALL:
        await message.answer("–£–∫–∞–∂–∏ –≤—ã—Å–æ—Ç—É –ø–æ–º–µ—â–µ–Ω–∏—è (–º):")
        await state.set_state(TileStates.height)
    else:
        await message.answer("–£–∫–∞–∂–∏ –¥–ª–∏–Ω—É –ø–ª–∏—Ç–∫–∏ (–º–º):")
        await state.set_state(TileStates.tile_length)

# –í—ã—Å–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç–µ–Ω)
@dp.message(TileStates.height)
async def get_height(message: Message, state: FSMContext):
    val = parse_float(message.text)
    if not must_be_positive(val):
        await message.answer("‚ùå –í–≤–µ–¥–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 2.5")
        return
    await state.update_data(height=val)
    await message.answer("–£–∫–∞–∂–∏ —à–∏—Ä–∏–Ω—É –¥–≤–µ—Ä–∏ (–º):")
    await state.set_state(TileStates.door_width)

@dp.message(TileStates.door_width)
async def get_door_width(message: Message, state: FSMContext):
    val = parse_float(message.text)
    if not must_be_positive(val, allow_zero=True):
        await message.answer("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ ‚â• 0, –Ω–∞–ø—Ä–∏–º–µ—Ä: 0.7 (–º–æ–∂–Ω–æ 0)")
        return
    await state.update_data(door_width=val)
    await message.answer("–£–∫–∞–∂–∏ –≤—ã—Å–æ—Ç—É –¥–≤–µ—Ä–∏ (–º):")
    await state.set_state(TileStates.door_height)

@dp.message(TileStates.door_height)
async def get_door_height(message: Message, state: FSMContext):
    val = parse_float(message.text)
    if not must_be_positive(val, allow_zero=True):
        await message.answer("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ ‚â• 0, –Ω–∞–ø—Ä–∏–º–µ—Ä: 2 (–º–æ–∂–Ω–æ 0)")
        return
    await state.update_data(door_height=val)
    await message.answer("–£–∫–∞–∂–∏ –¥–ª–∏–Ω—É –≤–∞–Ω–Ω—ã (–º):")
    await state.set_state(TileStates.bath_length)

@dp.message(TileStates.bath_length)
async def get_bath_length(message: Message, state: FSMContext):
    val = parse_float(message.text)
    if not must_be_positive(val, allow_zero=True):
        await message.answer("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ ‚â• 0, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1.7 (–º–æ–∂–Ω–æ 0)")
        return
    await state.update_data(bath_length=val)
    await message.answer("–£–∫–∞–∂–∏ —à–∏—Ä–∏–Ω—É –≤–∞–Ω–Ω—ã (–º):")
    await state.set_state(TileStates.bath_width)

@dp.message(TileStates.bath_width)
async def get_bath_width(message: Message, state: FSMContext):
    val = parse_float(message.text)
    if not must_be_positive(val, allow_zero=True):
        await message.answer("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ ‚â• 0, –Ω–∞–ø—Ä–∏–º–µ—Ä: 0.75 (–º–æ–∂–Ω–æ 0)")
        return
    await state.update_data(bath_width=val)
    await message.answer("–£–∫–∞–∂–∏ –≤—ã—Å–æ—Ç—É –≤–∞–Ω–Ω—ã (–º):")
    await state.set_state(TileStates.bath_height)

@dp.message(TileStates.bath_height)
async def get_bath_height(message: Message, state: FSMContext):
    val = parse_float(message.text)
    if not must_be_positive(val, allow_zero=True):
        await message.answer("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ ‚â• 0, –Ω–∞–ø—Ä–∏–º–µ—Ä: 0.45 (–º–æ–∂–Ω–æ 0)")
        return
    await state.update_data(bath_height=val)
    await message.answer("–ù—É–∂–Ω–æ –ª–∏ —É–∫–ª–∞–¥—ã–≤–∞—Ç—å —ç–∫—Ä–∞–Ω –ø–æ–¥ –≤–∞–Ω–Ω—É? (–¥–∞/–Ω–µ—Ç)")
    await state.set_state(TileStates.has_screen)

@dp.message(TileStates.has_screen)
async def get_screen(message: Message, state: FSMContext):
    ans = message.text.strip().lower()
    if ans not in ("–¥–∞", "–Ω–µ—Ç"):
        await message.answer("–û—Ç–≤–µ—Ç—å ¬´–¥–∞¬ª –∏–ª–∏ ¬´–Ω–µ—Ç¬ª.")
        return
    await state.update_data(has_screen=(ans == "–¥–∞"))
    await message.answer("–£–∫–∞–∂–∏ –¥–ª–∏–Ω—É –ø–ª–∏—Ç–∫–∏ (–º–º):")
    await state.set_state(TileStates.tile_length)

# –†–∞–∑–º–µ—Ä –ø–ª–∏—Ç–∫–∏, —Ü–µ–Ω–∞, —à–æ–≤ ‚Äî –æ–±—â–∏–µ
@dp.message(TileStates.tile_length)
async def get_tile_length(message: Message, state: FSMContext):
    val = parse_float(message.text)
    if not must_be_positive(val):
        await message.answer("‚ùå –í–≤–µ–¥–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 600")
        return
    await state.update_data(tile_length=val / 1000)  # –≤ –º–µ—Ç—Ä—ã
    await message.answer("–£–∫–∞–∂–∏ —à–∏—Ä–∏–Ω—É –ø–ª–∏—Ç–∫–∏ (–º–º):")
    await state.set_state(TileStates.tile_width)

@dp.message(TileStates.tile_width)
async def get_tile_width(message: Message, state: FSMContext):
    val = parse_float(message.text)
    if not must_be_positive(val):
        await message.answer("‚ùå –í–≤–µ–¥–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 300")
        return
    await state.update_data(tile_width=val / 1000)
    await message.answer("–£–∫–∞–∂–∏ —Ü–µ–Ω—É –ø–ª–∏—Ç–∫–∏ –∑–∞ 1 –º¬≤ (—Ä—É–±):")
    await state.set_state(TileStates.tile_price)

@dp.message(TileStates.tile_price)
async def get_tile_price(message: Message, state: FSMContext):
    val = parse_float(message.text)
    if not must_be_positive(val):
        await message.answer("‚ùå –í–≤–µ–¥–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1200")
        return
    await state.update_data(tile_price=val)
    await message.answer("–£–∫–∞–∂–∏ —à–∏—Ä–∏–Ω—É —à–≤–∞ (–º–º):")
    await state.set_state(TileStates.seam)

@dp.message(TileStates.seam)
async def get_seam(message: Message, state: FSMContext):
    val = parse_float(message.text)
    if val is None or val < 0:
        await message.answer("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ ‚â• 0, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1.5")
        return
    await state.update_data(seam=val / 1000)
    await message.answer(
        "–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∫–∏:",
        reply_markup=kb([["–ø—Ä—è–º–∞—è —Ä–∞—Å–∫–ª–∞–¥–∫–∞"], ["—Å–æ —Å–º–µ—â–µ–Ω–∏–µ–º"], ["–ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏"], ["–Ω–µ—Ç"]])
    )
    await state.set_state(TileStates.layout)

@dp.message(TileStates.layout)
async def get_layout(message: Message, state: FSMContext):
    layout = message.text.lower()
    if layout not in LAYOUTS:
        await message.answer("–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ üëá",
                             reply_markup=kb([["–ø—Ä—è–º–∞—è —Ä–∞—Å–∫–ª–∞–¥–∫–∞"], ["—Å–æ —Å–º–µ—â–µ–Ω–∏–µ–º"], ["–ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏"], 
["–Ω–µ—Ç"]]))
        return
    await state.update_data(layout=layout)
    await message.answer("–£–∫–∞–∂–∏ –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞–ø–∞—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5):")
    await state.set_state(TileStates.reserve)

@dp.message(TileStates.reserve)
async def calculate(message: Message, state: FSMContext):
    val = parse_float(message.text)
    if val is None or val < 0:
        await message.answer("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ ‚â• 0, –Ω–∞–ø—Ä–∏–º–µ—Ä: 5")
        return
    await state.update_data(reserve=val)

    data = await state.get_data()
    try:
        # 1) –ë–∞–∑–æ–≤–∞—è –ø–ª–æ—â–∞–¥—å
        if data["type"] == TYPE_WALL:
            perimeter = 2 * (data["length"] + data["width"])
            wall_area = perimeter * data["height"]
            door_area = max(0.0, data["door_width"] * data["door_height"])
            bath_area = max(0.0, data["bath_length"] * data["bath_height"])
            screen_area = max(0.0, data["bath_width"] * data["bath_height"]) if data["has_screen"] else 0.0
            base_area = wall_area - door_area - bath_area + screen_area
        else:
            base_area = data["length"] * data["width"]
            door_area = bath_area = screen_area = 0.0

        if base_area <= 0:
            await message.answer("‚ùóÔ∏è–ü–ª–æ—â–∞–¥—å –ø–æ–ª—É—á–∏–ª–∞—Å—å ‚â§ 0. –ü—Ä–æ–≤–µ—Ä—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –Ω–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ: /start")
            await state.clear()
            return

        # 2) –ù–∞–¥–±–∞–≤–∫–∞ –ø–æ —Ä–∞—Å–∫–ª–∞–¥–∫–µ
        layout = data["layout"]
        if layout == "—Å–æ —Å–º–µ—â–µ–Ω–∏–µ–º":
            base_area *= 1.05
        elif layout == "–ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏":
            base_area *= 1.10

        # 3) –ó–∞–ø–∞—Å
        total_area = base_area * (1 + data["reserve"] / 100)

        # 4) –ö–æ–ª-–≤–æ –ø–ª–∏—Ç–æ–∫ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å
        tile_area = data["tile_length"] * data["tile_width"]
        if tile_area <= 0:
            await message.answer("‚ùóÔ∏è–ù–µ–≤–µ—Ä–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –ø–ª–∏—Ç–∫–∏. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ: /start")
            await state.clear()
            return

        tile_count = total_area / tile_area
        cost = total_area * data["tile_price"]

        await message.answer(
            f"<b>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á—ë—Ç–∞:</b>\n\n"
            f"‚ñ™Ô∏è –ü–ª–æ—â–∞–¥—å —É–∫–ª–∞–¥–∫–∏: <b>{total_area:.2f} –º¬≤</b>\n"
            f"‚ñ™Ô∏è –°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{cost:.0f} —Ä—É–±</b>\n"
            f"‚ñ™Ô∏è –ö–æ–ª-–≤–æ –ø–ª–∏—Ç–∫–∏: <b>{tile_count:.0f} —à—Ç</b>\n"
            f"‚ñ™Ô∏è –ü–ª–æ—â–∞–¥—å –¥–≤–µ—Ä–∏: {door_area:.2f} –º¬≤\n"
            f"‚ñ™Ô∏è –ü–ª–æ—â–∞–¥—å –≤–∞–Ω–Ω—ã: {bath_area:.2f} –º¬≤\n"
            f"‚ñ™Ô∏è –ü–ª–æ—â–∞–¥—å —ç–∫—Ä–∞–Ω–∞: {screen_area:.2f} –º¬≤\n"
            f"‚ñ™Ô∏è –†–∞—Å–∫–ª–∞–¥–∫–∞: {layout}\n\n"
            f"üîÅ <b>–ü–æ—Å—á–∏—Ç–∞—Ç—å –∑–∞–Ω–æ–≤–æ</b> ‚Äî –Ω–∞–∂–º–∏ /start"
        )
    except Exception as e:
        log.exception("calc failed: %s", e)
        await message.answer("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑: /start")
    finally:
        await state.clear()

# –ë–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ¬´–≤–Ω–µ —Å—Ü–µ–Ω–∞—Ä–∏—è¬ª ‚Äî —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –º–æ–ª—á–∞–ª
@dp.message()
async def fallback(message: Message):
    await message.answer("–Ø –∂–¥—É –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ ‚Äî /start")

# –ó–∞–ø—É—Å–∫ (–¥–ª—è Render/–ª–æ–∫–∞–ª—å–Ω–æ)
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
