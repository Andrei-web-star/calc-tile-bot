import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo, ReplyKeyboardMarkup, KeyboardButton
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram import F

import asyncio

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
TOKEN = "–í–ê–®_–ù–û–í–´–ô_–¢–û–ö–ï–ù"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class TileTypeState(StatesGroup):
    choosing_tile_type = State()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞ Mini App ColorMood
    colormood_button = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üé® –û—Ç–∫—Ä—ã—Ç—å ColorMood Pro",
                    web_app=WebAppInfo(url="https://colormood.vercel.app")
                )
            ]
        ]
    )

    # –ü–æ–∫–∞–∂–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ Mini App —Å—Ä–∞–∑—É
    await message.answer("üé® <b>ColorMood Pro</b> ‚Äî –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞–ª–∏—Ç—Ä –∏ –º—É–¥–±–æ—Ä–¥–æ–≤ –æ—Ç –î–ò–ó –ë–ê–õ–ê–ù–°:\nüëá –ù–∞–∂–º–∏, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å:", reply_markup=colormood_button)

    # –ó–∞—Ç–µ–º ‚Äî –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–ª–∏—Ç–∫–∏
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üß± –ù–∞—Å—Ç–µ–Ω–Ω–∞—è"), KeyboardButton(text="üß± –ù–∞–ø–æ–ª—å–Ω–∞—è")]
        ],
        resize_keyboard=True
    )

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–ª–∏—Ç–∫–∏ –æ—Ç <b>–î–ò–ó –ë–ê–õ–ê–ù–°</b>. üß±\n"
        "–Ø –ø–æ–º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ <b>–Ω–∞—Å—Ç–µ–Ω–Ω–æ–π</b> –∏–ª–∏ <b>–Ω–∞–ø–æ–ª—å–Ω–æ–π</b> –ø–ª–∏—Ç–∫–∏ —Å —É—á—ë—Ç–æ–º —Ä–∞–∑–º–µ—Ä–æ–≤, —à–≤–æ–≤, —Ä–∞—Å–∫–ª–∞–¥–∫–∏ –∏ –∑–∞–ø–∞—Å–∞.\n\n"
        "<b>–í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤–≤–æ–¥–∏ –≤ –º–µ—Ç—Ä–∞—Ö</b>, –∞ —Ä–∞–∑–º–µ—Ä—ã –ø–ª–∏—Ç–∫–∏ ‚Äî –≤ <b>–º–∏–ª–ª–∏–º–µ—Ç—Ä–∞—Ö</b>.\n"
        "–ï—Å–ª–∏ —á–∏—Å–ª–æ –Ω–µ —Ü–µ–ª–æ–µ ‚Äî –º–æ–∂–Ω–æ —Å –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ —Ç–æ—á–∫–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2,5 –∏–ª–∏ 2.5).\n\n"
        "–í—ã–±–µ—Ä–∏ —Ç–∏–ø –ø–ª–∏—Ç–∫–∏:",
        reply_markup=keyboard
    )

    await state.set_state(TileTypeState.choosing_tile_type)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–ª–∏—Ç–∫–∏
@dp.message(TileTypeState.choosing_tile_type)
async def choose_tile_type(message: Message, state: FSMContext):
    if message.text == "üß± –ù–∞—Å—Ç–µ–Ω–Ω–∞—è":
        await message.answer("üîß –í–≤–µ–¥–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –Ω–∞—Å—Ç–µ–Ω–Ω–æ–π –ø–ª–∏—Ç–∫–∏:")
    elif message.text == "üß± –ù–∞–ø–æ–ª—å–Ω–∞—è":
        await message.answer("üîß –í–≤–µ–¥–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –Ω–∞–ø–æ–ª—å–Ω–æ–π –ø–ª–∏—Ç–∫–∏:")
    else:
        await message.answer("–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã üëá")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
